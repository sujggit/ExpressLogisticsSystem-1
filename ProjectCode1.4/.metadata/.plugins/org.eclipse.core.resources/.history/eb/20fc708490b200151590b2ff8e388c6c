package dataserviceimpl;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import dataservice.FinanceDataService;
import enums.DocumentCondition;
import enums.PaymentType;
import enums.ResultMessage;
import link.Helper;
import po.AccountPO;
import po.AgencyPO;
import po.CarPO;
import po.CompanyAccountPO;
import po.PaymentPO;
import po.ReceiptsPO;
import po.ReceiverPO;
import po.StaffPO;

public class FinanceDataImpl extends UnicastRemoteObject implements FinanceDataService {

	private FinanceDataImpl() throws RemoteException {
		super();
		// TODO Auto-generated constructor stub
	}

	//	@Override
	//	public ReceiptsPO findReceiptsPO(String id) {
	//		// TODO Auto-generated method stub
	//		ResultSet result = null; 
	//		String sql1 = "set sql_safe_update=0;";
	//		String sql2 = "select*from receiptspo where data = '"+id+"';";
	//		ReceiptsPO po = null;
	//		try{
	//			Helper.insert(sql1);
	//			result = Helper.find(sql2);
	//			if(result.next()){
	//				String[]orderNumbers = result.getString("orderNumbers").split(" ");
	//			po = new ReceiptsPO(result.getString("data"),result.getDouble("fee"),result.getString("courier"),orderNumbers);
	//			
	//			}
	//		}catch(Exception e){
	//			e.printStackTrace();
	//		}
	//		
	//		
	//		
	//		return null;
	//	}



	@Override
	public ResultMessage insertPaymentPO(PaymentPO payment) {

		// TODO Auto-generated method stub
		String sql = "insert into paymentpo values('"+payment.getReceiver()+"','"+payment.getType()+"',"+payment.getNumberOfPayment()+",'"+payment.getAccountname()+"','"+payment.getCondition()+"','"+payment.getNameOfWriter()+"','"+payment.getRemarks()+"','"+payment.getAuditnumber()+"');";
		return Helper.insert(sql);
	}

	@Override
	public AccountPO findAccountPO(String id) {
		// TODO Auto-generated method stub
		AccountPO po = null; 
		ResultSet result = null;
		String sql = "select*from Accountpo where name='"+id+"';";
		try{
			result = Helper.find(sql);
			if(result.next())
				po = new AccountPO(result.getString("name"),result.getDouble("balance"));
		}catch (Exception e){
			e.printStackTrace();
		}
		return po;
	}


	@Override
	public ResultMessage insertAccountPO(AccountPO account) {
		// TODO Auto-generated method stub
		String sql = "insert into accountpo value('"+account.getName()+"',"+account.getBalance()+");";
		return Helper.insert(sql);
	}

	@Override
	public ResultMessage deleteAccountPO(AccountPO account) {
		// TODO Auto-generated method stub
		String sql1 = "set sql_safe_updates=0;";
		String sql2 = "delete from accountpo where name='"+account.getName()+"';";
		String sql3 = "set sql_safe_updates=1;";
		Helper.insert(sql1);
		Helper.delete(sql2);
		Helper.insert(sql3);
		return null;
	}

	@Override
	public ResultMessage updateAccountPO(AccountPO account) {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
		ResultMessage result = deleteAccountPO(account);
		if(result==ResultMessage.FAIL)
			return result;
		return insertAccountPO(account);
	}

	@Override
	public CompanyAccountPO findCompanyAccountPO(int year) {
		// TODO Auto-generated method stub
		CompanyAccountPO po = new CompanyAccountPO();
		ArrayList<AgencyPO>agencyPOs = null;
		ArrayList<StaffPO>staffPOs = null;
		ArrayList<CarPO>carPOs = null;
		ArrayList<AccountPO>accountPOs = null;

		String sql = "select*from CompanyAccountpo where year="+ year+ ";";
		ResultSet result = null;

		try{
			result = Helper.find(sql);
			if(result.next())
				accountPOs = (ArrayList<AccountPO>) IOObject.getArray(result.getBytes("accountlist"));
			agencyPOs = (ArrayList<AgencyPO>) IOObject.getArray(result.getBytes("agencylist"));
			carPOs = (ArrayList<CarPO>) IOObject.getArray(result.getBytes("carlist"));
			staffPOs = (ArrayList<StaffPO>) IOObject.getArray(result.getBytes("stafflist"));
			po.setAccountlist(accountPOs);
			po.setAgencyList(agencyPOs);
			po.setCarlist(carPOs);
			po.setStafflist(staffPOs);
			po.setYear(result.getInt("year"));
		}catch (Exception e){
			e.printStackTrace();
		}
		return po;
	}

	@Override
	public ResultMessage insertCompanyAccountPO(CompanyAccountPO companyaccount) {
		// TODO Auto-generated method stub

		String[]sql = new String[18];
		sql[0] = "insert into companyaccountpo values("+ companyaccount.getYear()+",?,?,?,?);";
		sql[1] = "delete from orderpo;";
		sql[2] = "delete from agencypo;";
		sql[3] = "delete from carpo;";
		sql[4] = "delete from constantpo;";
		sql[5] = "delele from deliverpo;";
		sql[6] = "delete from driverpo;";
		sql[7] = "delete from ioputpo;";
		sql[8] = "delete from logisticspo;";
		sql[9] = "delete from logpo;";
		sql[10] = "delete from orderpo;";
		sql[11] = "delete from paymentpo;";
		sql[12] = "delete from receiptspo;";
		sql[13] = "delete from salarypo;";
		sql[14] = "delete from staffpo;";
		sql[15] = "delete from stockpo;";
		sql[16] = "delete from transportpo;";
		sql[17] = "delete from userpo;";
		
		for(int i=1;i<sql.length;i++){
			ResultMessage resultMessage = Helper.delete(sql[i]);
			if(resultMessage==ResultMessage.FAIL)
				return resultMessage;
		}
		
		try{
			Helper.pStatement = Helper.conn.prepareStatement(sql[0]);
			Helper.pStatement.setObject(1,IOObject.toByteArray(companyaccount.getAgencyList()));
			Helper.pStatement.setObject(2,IOObject.toByteArray(companyaccount.getStafflist()));
			Helper.pStatement.setObject(3,IOObject.toByteArray(companyaccount.getCarlist()));
			Helper.pStatement.setObject(4,IOObject.toByteArray(companyaccount.getAccountlist()));
			Helper.pStatement.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return ResultMessage.FAIL;
		}
		
		

		return ResultMessage.SUCCESS;
	}

	public static FinanceDataImpl creat() throws RemoteException {
		if(finance == null){
			synchronized(FinanceDataImpl.class){

				if(finance == null)
					finance = new FinanceDataImpl();
			}
		}

		return finance;
	}

	private volatile static FinanceDataImpl finance;

	@Override
	public ArrayList<AccountPO> seekAccount(String name) {
		// TODO Auto-generated method stub
		ArrayList<AccountPO>pos = new ArrayList<AccountPO>();
		AccountPO po = null; 
		ResultSet result = null;
		String sql = "select*from Accountpo where name like'%"+name+"%';";
		try{
			result = Helper.find(sql);
			while(result.next()){
				po = new AccountPO(result.getString("name"),result.getDouble("balance"));
				pos.add(po);
			}

		}catch (Exception e){
			e.printStackTrace();
		}
		return pos;
	}

	@Override
	public ArrayList<PaymentPO> findsPaymentPO(String workplacenumber) throws RemoteException {
		// TODO Auto-generated method stub
		ArrayList<PaymentPO>pays = new ArrayList<PaymentPO>();
		PaymentPO po = null;
		ResultSet result = null;
		String sql = "select *from paymentpo where workplacenumber="+workplacenumber+";";
		try{
			result = Helper.find(sql);
			while(result.next()){
				po = new PaymentPO();
				po.setReceiver(result.getString("receiver"));
				po.setRemarks(result.getString("remarks"));
				po.setAccountname(result.getString("accountname"));
				po.setCondition(DocumentCondition.valueOf(result.getString("dCondition")));
				po.setNameOfWriter(result.getString("nameOfWriter"));
				po.setType(PaymentType.valueOf(result.getString("paymentType")));
				po.setNumberOfPayment(result.getDouble("numberOfPayment"));
				po.setAuditnumber(result.getString("auditnumber"));
				pays.add(po);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return pays;
	}

	@Override
	public ArrayList<PaymentPO> findPWithdContion(String nameOfWriter, DocumentCondition dCondition) throws RemoteException {
		// TODO Auto-generated method stub
		ArrayList<PaymentPO>pays = new ArrayList<PaymentPO>();
		PaymentPO po = null;
		ResultSet result = null;
		String sql = "select *from paymentpo where nameOfWriter="+nameOfWriter+"' and documentcondition='"+dCondition+"';";
		try{
			result = Helper.find(sql);
			while(result.next()){
				po = new PaymentPO();
				po.setReceiver(result.getString("receiver"));
				po.setRemarks(result.getString("remarks"));
				po.setAccountname(result.getString("accountname"));
				po.setCondition(DocumentCondition.valueOf(result.getString("dCondition")));
				po.setNameOfWriter(result.getString("nameOfWriter"));
				po.setType(PaymentType.valueOf(result.getString("paymentType")));
				po.setNumberOfPayment(result.getDouble("numberOfPayment"));	
				po.setAuditnumber(result.getString("auditnumber"));
				pays.add(po);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return pays;
	}

	@Override
	public ArrayList<AccountPO> getAllAccount() throws RemoteException {

		// TODO Auto-generated method stub
		String sql="select*from accountpo;";
		ResultSet resultSet = null;
		ArrayList<AccountPO>accountPOs=new ArrayList<AccountPO>();


		try {
			resultSet=Helper.find(sql);
			while(resultSet.next()){
				AccountPO po=new AccountPO(resultSet.getString(1), resultSet.getDouble(2));
				accountPOs.add(po);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		return accountPOs;
	}

	@Override
	public ArrayList<PaymentPO> findAudit() {
		// TODO Auto-generated method stub
		ArrayList<PaymentPO>pays = new ArrayList<PaymentPO>();
		PaymentPO po = null;
		ResultSet result = null;
		String sql = "select *from paymentpo where dcondition= 'handing';";
		try{
			result = Helper.find(sql);
			while(result.next()){
				po = new PaymentPO();
				po.setReceiver(result.getString("receiver"));
				po.setRemarks(result.getString("remarks"));
				po.setAccountname(result.getString("accountname"));
				po.setCondition(DocumentCondition.valueOf(result.getString("dCondition")));
				po.setNameOfWriter(result.getString("nameOfWriter"));
				po.setType(PaymentType.valueOf(result.getString("paymentType")));
				po.setNumberOfPayment(result.getDouble("numberOfPayment"));
				po.setAuditnumber(result.getString("auditnumber"));
				pays.add(po);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return pays;
	}

	@Override
	public ResultMessage updatePaymentPO(PaymentPO payment) throws RemoteException {
		// TODO Auto-generated method stub
		String sql = "update paymentpo set receiver='"+ payment.getReceiver()+ "',paymenttype='"+ payment.getType() 
		+ "', numberOfpayment ="+ payment.getNumberOfPayment() + ", accountname='"
		+ payment.getAccountname() +"',dCondition='"+ payment.getCondition()+"', nameOfwriter='"+ payment.getNameOfWriter()
		+ "', remarks ='"+ payment.getRemarks()+ "' where auditnumber='"+ payment.getAuditnumber()+"';";


		return Helper.delete(sql);
	}

	@Override
	public PaymentPO findLastest() throws RemoteException {
		// TODO Auto-generated method stub
		String sql="select * from paymentpo order by auditnumber desc;";
		PaymentPO po = null;
		ResultSet result = null;

		try{
			result = Helper.find(sql);
			if(result.next()){
				po = new PaymentPO();
				po.setReceiver(result.getString("receiver"));
				po.setRemarks(result.getString("remarks"));
				po.setAccountname(result.getString("accountname"));
				po.setCondition(DocumentCondition.valueOf(result.getString("dCondition")));
				po.setNameOfWriter(result.getString("nameOfWriter"));
				po.setType(PaymentType.valueOf(result.getString("paymentType")));
				po.setNumberOfPayment(result.getDouble("numberOfPayment"));	
				po.setAuditnumber(result.getString("auditnumber"));
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return po;
	}


}
